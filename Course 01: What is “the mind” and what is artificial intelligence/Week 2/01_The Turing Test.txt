Probably the most famous
early idea about equating machine intelligence
and the human mind is a notion called
the Turing test. It derives from a famous paper by the I guess you could call him the mathematician and computer
scientist, Alan Turing. In 1950, he wrote a paper called Computing Machinery
and Intelligence, and it was published in the journal Mind,
philosophical journal. In that paper, he
outlined the idea of an operational test for whether you could say that
a computer or machine was intelligent or had a
human-like intelligence. Alan Turing along with
John von Neumann, with whom his name
is usually paired. Alan Turing is one of the two great founding
figures of computer science. In 1936, '37 he wrote a paper, which introduced the idea
of a Turing machine, which was a mathematical
abstraction supposed to represent the idea of a computer. Well, at that point,
what people generally meant by a computer
was a human being, a person whose job it
was to actually do a certain routinized
arithmetic in order to compute
tables and so forth. There were no computers of the sort that we think of
as existing at that point. That is to say there were
no automatic computers, there were no
electronic computers. But when Alan Turing
wrote his paper, he was providing a
mathematical abstraction of any computing machinery, and his idea in that paper
was to try and formalize the idea of what it meant to be computable by
mechanical means, you could put it that way. There was a similar
motivating force behind his later 1950 paper, which introduced the
idea of the Turing test. He didn't call it the Turing
test in his 1950 paper. It's been called that since
that time but in his paper, he called it The Imitation Game. The basic idea is this; that you put a computer and a person behind two separate doors in
two separate rooms, and the doors are closed and you as a judge come
up to these two doors and you can type questions at the time of the writing of
his paper in 1950, it would have been
something like a teletype. You could imagine typing over a computer line to both rooms. You can get back textual
answers from both rooms. One is a person just answering questions
the way a person would. They have no particular
instructions except to answer the
questions however they want. The other room contains a
computer whose job it is to fool you the judge into
thinking that it is a person. Your job is to tell
the two apart. If you can't tell the two apart, if you can't say, so here's room number
one with the person and here's room number two with the computer, what shall I do? You would not see this as far as you're concerned as the judge, you just see two doors, but behind one of these
doors is a person and behind the other
is a computer, which I'll just represent as
a screen and the keyboard. So your job is to
tell these two things apart via the answers that they provide over the
computer connection or teletype or whenever. If you can't do that in
about 15 minutes or so, then as far as Turing is
concerned in this paper, you could say of the computer
that it is intelligent. It certainly has a kind of
operational intelligence good enough to fool a person into thinking that
this is a human. Now, when he introduced
this idea in his paper, he actually begins
with a scenario that is similar but not
identical to this. He imagines an imitation game played between a man and a woman. So behind one door is a man, behind the other door is a woman. You can type questions
at both of them. You don't know which room
contains which person. So you can type questions to
both of them and your job. Well, without loss of generality, you could say that the man's
job is to pretend to be a woman and the woman's job is just to answer the question
however she wishes. Your job as judge is to
tell the two rooms apart. Say, which of the
rooms contains a woman answering the questions
and which of the rooms contains a man pretending
to be a woman. Notice that in this
scenario, which by the way, as far as I know, I don't know if anyone has actually
done this experiment. Sounds like it could be a fun party game or
something like that. But regardless, there
are two challenges that has to be met here. One is the man whose job is to successfully
pretend to be a woman, the other challenge is that of the judge whose job is
to tell the two apart. You could imagine
doing versions of this imitation game tests
with a lot of other pairings. You could have say, a 20-year-old and a 70-year-old, where the 20-year-old's
job is to pretend to be the older person and
your job as judge is to tell which of the
two rooms contains a genuine 70-year-old person and which contains a young person pretending to be an older
person or you could do this with different
geographic locations. Somebody from Alaska
and somebody from South Carolina or you could do it with different
political orientations. There are a whole
variety of things. In any of those cases, it might make for a really
interesting experiment. In the test that Turing imagines, the job is to tell a
person from a computer. Early on in the paper, he provides a sample question and answer that the
judge might give, where the judge is asking
questions and he or she is getting back answers
from one of the two rooms, and the judge's job is
to determine whether this might be a
computer or a person. So I'll just read it out. Please write me a sonnet on the subject of the fourth bridge. Answer: Count me out on this one. I never could write poetry. Add couple of numbers, wait for awhile and then
response is printed out. Do you play chess? Yes, I have king at my
K1 and no other pieces. You have only a king
at K6 and rook at R1, that's your move, what do
you play and so forth. Even in this little exchange, there's something rather clever and charming going on, which is, if you examined the
addition problem carefully, you will see that whoever
is answering this question, whether it's a person
or a computer, whoever is answering
this question, gives the wrong answer. Now, you might reason if you were the judge that superficially,
you might think, "Well, that has to be the person, not the computer answering the question because after all, a computer would
not get the answer to an addition problem
wrong, would it?" Well, remember this is a computer programmed to imitate
a human being. Therefore, it might be a
computer whose program tells it to make the errors that people are likely to
make in addition. In fact that the error
that's made here is not a wildly off base error, it might be the
kind of error that a person would actually
make in adding two numbers. So this is a very cute
introduction to the paper. The idea again is
that Turing is not saying that if a computer
can pass this test, it's a human, nothing like that. All that he's arguing is that
as far as we're concerned, we could think of
this test as a way of just in a concrete way
settling the argument about whether a machine could
actually be intelligent. If a machine could
pass this test, then it would be Intelligent. In the course of the paper, Turing provides a bunch of potential objections to his idea. You get the feeling that in
writing this paper in 1950, Alan Turing went around
to a variety of people, and talked to them
about this idea and got back certain objections
and answers, and he wrote these all out and provided his own responses
to these objections. As I give this lecture, I'm hoping that you read the paper or have read it before. You're actually
watching this lecture, and you've already made
some internal decisions for yourself about the
provocative myths or interest of these
various objections. I'm not going to
go through all of them just for lack of time, but I'll mention several. People have different
favorites or they want to focus on
different objections. I'll mention a few of them. The argument from consciousness, Lady Lovelace's objection and the argument from
ESP, all interesting. In fact, all the objections
could be things that we could talk more about but I'll just
focus on these three. So what about the argument
from consciousness? A lot of people would look at Turing's test and
say a bit, sure, you could say that maybe a
computer could pass this test but you wouldn't say
that the computer was conscious or had anything like human consciousness
in doing this. Turing's response to this in a way that may or
may not convince you, he says something
to the effect that, "Well, consciousness
is quite mysterious. We don't really know
whether it involves. But again, if you were having a conversation
with the computer and it looked something like the following," and he
gives this example. This is the question. In the first line of
your sonnet which reads, "Shall I compared thee
two a summer's day?" Would not a spring day
do as well or better? Answer, it wouldn't scan. How about a winter's day? That would scan all right, yes. But nobody wants to be
compared to a winter's day. Would you say Mr. Pickwick reminded you of Christmas?
Answer, in a way. Yeah, Christmas is a
winter's day and I do not think Mr. Pickwick would
mind that the comparison. I don't think you're serious. By a winter's day, one means the
typical winter's day rather than a special
one like Christmas. Now, look, if you were having that conversation with an
entity behind the door, you would be willing to
attribute, if not consciousness, then certainly a great deal
of knowledge to this entity. It's read Dickens, it knows
about Mr. Pickwick and it knows that Christmas is
a special winter's day, and it knows about the
rhythm of lines and poetry. It feels like a very
natural conversation. In fact, bordering on an
interesting conversation, the one I was having
with this entity. So Turing's argument is well, if you could have a
conversation of this kind, then for whatever it's worth, you'd probably be willing to attribute intelligence and
perhaps consciousness to. It might be very difficult
to tease apart whether the entity really did have
consciousness or not. But certainly, in an
offhand and formal way, you would be willing to
attribute consciousness to it. If I say this may or may not
convince you as an argument, but that's the response
that Turing gives. In the case of Lady
Lovelace's objection, that's an interesting objection. He quotes a paper
that was written in the early 1840s by
Countess Ada Lovelace. Countess Ada was a colleague, a collaborator of the
British mathematician, Charles Babbage. Charles Babbage, this a fascinating story and I
only wish I had more time to go through the entire history of it because it really
is an amazing story. Charles Babbage was an
early 19th century genius, a mathematician. He had many interests. Over his life, his
overriding desire, his obsession became to
build something which he called the analytical engine. Analytical engine being
a mechanical device that could automatically
do a wide, it in fact has a strong resemblance to a
general purpose computer. If you read about Babbage's life and you
read some of his notes, it's very clear
that he had many of the pioneering ideas about
how a computer might work, and what a computer could
do although in his vision, he was thinking of
this as a mechanical, perhaps steam-driven
entity rather than of naturally this being in the early 18 hundreds rather than being an
electrical device. Nonetheless, his ideas about computing were quite amazing. He never did actually
get to build the analytical engine
because the engineering of the time was not
up to the cost and precision that would have been required to build a
working analytical engine. Although, there's more to
say about that as well. In any event, Babbage worked
with Countess Ada Lovelace, who was the daughter of the
famous poet, Lord Byron. She actually co-wrote along with a very cogent Italian writer
named Luigi Menabrea. She co-wrote a large paper, a thorough paper on the idea
of the analytical engine, how it would be built and
how it would be programmed. It is an amazing paper even not considering that it was written in the early 1840s. It's just a thoroughly
amazing paper. You can find it on the web, it's well-worth reading to
see how somebody who was just pioneering many
of these ideas, who was thinking about these things for the
first time really in human history was
starting to think about the notion of
automatic computing. In the course of that paper, Countess Ada says something very interesting and
something that had been echoed or has been echoed since the electronic or digital
computers have been made. Namely, she didn't quite use this language but this is essentially
what she was saying, a computer can't do
anything on its own, it can't think on its own, rather, it can only do those things that the
programmer has told it to do. So it doesn't have any
innovative intelligence. It just does the things
that a program could do. That's a very interesting idea, and that's one of the arguments
that Turing alludes to in discussing his own thought experiment
of the Turing Test. There are different ways of
responding to this objection. One, speaking as a programmer, I can tell you and you may have had this experience too
if you're a programmer, speaking as a programmer, I can say that it is
often the case that a program does things
that I suppose in the sense I told it to do but were very unexpected to me. In other words, yeah, the program is doing what the
programmer told it to do, but the programmer
doesn't always know what he or she is telling
the computer to do. Maybe more powerfully,
you could certainly see the possibility of a
computer program learning from experience over time. In which case, depending on the experience that
the program has, it learns to do things
that are well beyond anything that the
programmer might have initially thought to
put into the program. So these are potential responses to Countess Ada's very thoughtful and
interesting objection. That's not the only reason to
read Countess Ada's paper, it's a brilliant paper and has many other wonderful ideas and
predictions in it as well. Finally, I should mention
the objection from ESP, I don't have a slide for that but Turing was responding to experiments that
had recently been done by a researcher
named J B Rhine, R-H-I-N-E, who was working,
I believe at Duke, and who had done a variety
of these experiments, I'm not positive I'm
getting this right, but it's something along
the line like telepathy, where one person
would look at a card with a symbol on it
and another person across the room would try to guess what symbol the first
person was looking at, and according to Rhine, there were people who
were able to guess the observed symbol at a much
higher rate than chance. I'm not going to
go into arguments about these experiments here, suffice it to say that those experiments of Rhine
have never been replicated, certainly not
satisfactorily replicated. Frankly, I find the
results very dubious. But if you're reading
Turing's paper and you see him allude to this
objection from ESP, you might think that he's
being facetious but he's not, he's just keeping an open mind, like a good scientist and saying, "Well, if these experiments
are on the level, then there may be a great deal more involved in thinking or intelligence than we've been ready to acknowledge this far." So he's just saying,
if that's true, then perhaps there's
something going on that we could not
mimic with a computer. In point of fact, I don't think it's in retrospect, I don't think it's a
very powerful objection. Well, what about the
Turing test itself? Turing made a prediction
at the end of his paper that he
felt that the test would be passed by a computer program
around the year 2000. As I'm speaking now, it is the year 2017 and no program has come close
to passing the Turing test. There is no program out there such that you could do
this kind of experiment, where you put the program behind one door and a person behind
another door and the program could reliably fool a judge into thinking that it's a person
after about 15 minutes or so. Nothing close to it. Which leaves us with a
rather interesting question. If the Turing test
cannot be passed, why? What was Turing missing? Maybe one of those objections
that he was referring to is more powerful than he
gave it credit for being. In other words, maybe there is a deep philosophical reason why no computer program could
ever pass the Turing test. That's why, we, the community of computer
scientists and researchers, have not managed to come up with a successful program in 67 years since Turing
wrote this paper. As an aside, it's not
that this has been the main goal of the computer science community in those intervening 67 years, people for a long time, there was a general
lack of interest in actually trying to program a computer to do
this kind of thing. You might say that, "Well, people have not really worked
very hard on this problem, so maybe it's not that surprising that no program
has passed the Turing test." Okay. There's some merit to that, and a lot of computer
scientists, and researchers, and artificial intelligence do not feel that the Turing Test is a terribly meaningful test at least as far as their
own research is concerned. But let's leave that aside
and just say that, in fact, no computer program
has passed the test, maybe it can't be passed. On the other hand,
if it can be passed, look the other side
of the question. If the Turing test can be
passed, what are we missing? Why has it taken so long? So that's a kind of interesting
pairing of questions. If the test can be passed, then what's taking us so long? If the test can't be passed, what is the reason for it? We don't have
satisfactory answers to either of those questions. But we do have programs
that in one fashion or another do pass the little
local Turing tests, they're not general
Turing tests of the kind that the paper imagines, but they're still interesting. The Watson program,
the famously did so well on the Jeopardy
quiz show, is one example, and you're probably familiar with a tiny little Turing
tests that you see on the web all the time,
the CAPTCHA program, which is, in essence, a little Turing test, you're now trying to pass
the Turing test to show that you are a human
being, not a computer. So this is a little test
to see if you can read a couple of poorly written words, this would be a task that computer programs would
have some difficulty doing, but people are able to do easily. There's a lot of interest even if you think about
this kind of task. First of all, as you
may have noticed, computers get better and
better at passing these tests. So there's a arms race involved. Over time, the CAPTCHA questions have to become more
challenging for the person to the point where, at least in my experience, sometimes I'm trying to get onto a web page and I get
a question like this, and I don't think I can read the word that they're
telling me to read. So it's getting to the point
where I'm not a sufficiently good human being to actually
pass the CAPTCHA test. But these are the kind
of tasks that we'll also return to in discussion
as well in this course. There are other kinds of small-scale Turing
tests like whether a computer is able to
write music, for instance. That might convince you that it was written by a human being. Other kinds of things like
that, all quite interesting. Finally, I should not leave
this topic without mentioning a very famous response
to Turing's paper written I think around 1980 by the philosopher
John Searle. He posed a counter
thought experiment to Turing's test and his
thought experiment is called the Chinese
room experiment. The idea behind this experiment is you imagine,
here's his scenario. You have a room. I'll just draw the
boundaries of the room here. So, and there's the outside of the room and on this side on
my side of the screen here, is the inside of the room, and there's a guy on
the inside of the room and he has a large rule book. This is my highly imperfect
drawing of a large rule book, and lots and lots and lots of scrap paper in a big basket. So lots and lots of scrap
paper and a pencil, as much paper and as many pencils as he
could possibly need. There is a little input
slot in the room and a little output slot and here's the idea.
Here is this guy. Let us assume that he, like me, is a native English speaker and does not speak a word of Chinese. Okay? This entire room is going to be playing the role of the computer
in the Turing test. It's going to be
answering questions in Chinese and the input
slot therefore, has questions written
in Chinese characters. The guy on the inside
of the room does not understand a single
symbol of Chinese. However, he's able to take these input characters and
then use this rule book, which has a bunch of rules
that tell him how to manipulate other
kinds of characters, in response to these characters. He can write down any notes that the book tells him to write
down on the scratch paper. So he has all the
scratch paper he needs. He follows very explicitly to the letter the rules
given in the rule book, and the rules are such that they tell him eventually to get another scrap of paper and write on it a certain
number of characters, which are totally
meaningless to him, to the guy, and then he passes those characters out
the output slot. In other words, think of the
entire behavior of the room. It gets Chinese questions in, this guy who does not understand Chinese is taking the
rules in this book and using them to manipulate
various marks on paper and eventually write some other Chinese characters, and presumably, the
word book is written in English so he can
understand the rules, but the rules tell him to write down certain squiggles
and squaggles that he doesn't understand and then he passes those to him meaningless symbols
out the output slot. Searle argues that, conceivably this room might
pass the Turing test in Chinese if the program were good enough to mimic the behavior
of a Chinese speaker. So Searle says, well, what would happen if, suppose this room did
pass the Turing test, where is the knowledge
of Chinese in here? What knows Chinese here? It's certainly not the guy, he doesn't know a
word of Chinese. The book doesn't know Chinese. You can't say that a
book knows anything. The book doesn't know Chinese. Certainly the scrap paper
doesn't know Chinese. So what is it? Where is the knowledge of
Chinese in this entire system? In this brief summary
probably as far as Searle is concerned doesn't begin to
do justice to his argument, but basically, the
argument is that, you could have a
mechanical entity that passes the Turing test, but it would not have what
we would call consciousness. It's just a set of mechanical rules for
manipulating symbols. Like Turing, Searle includes
a variety of objections to his Chinese room scenario
that he has heard from various people in presenting this
thought-experiment. People that is responding to Searle's thought
experiment and saying, no, I think you're presenting an unfair thought experiment to the purposes of
artificial intelligence. So I would leave to you the task of reading
Searle's argument, the very pleasurable task
of reading slots paper, and going through the arguments that are made in response
to the Chinese room, and thinking about his responses. There are many
wonderful responses in the literature as well. People who have written since
Searle's original paper, there have been many
people who have responded to the
Chinese room argument, and I have some favorites
among those counter responses. But I won't go into them
here and would just leave it to you to read
Searle's argument. Let's leave it with
this position. We have as yet unmet challenge from Alan Turing for
machine intelligence. We have a provocative, but certainly not
universally agreed to counter argument from
John Searle saying that, even if a computer could
pass the Turing test, and none have done so so far, but even if a computer
could pass the Turing test, that would not be, for us, a very important or meaningful
step in as much as this would not indicate that
the program passing the Turing test has
actual consciousness. What we would call meaningful
Intelligence perhaps. So we'll leave it at that and as we continue to
discuss Machines in mind, we'll talk about what
things have been accomplished in
computer programming to imitate human intelligence.